#include<iostream>
#include "SFML/Graphics.hpp"
using namespace std;
enum DIRECTIONS { LEFT, RIGHT, UP, DOWN }; //left is 0, right is 1, up is 2, down is 3

int main() {
    //game set up (you'll need these lines in every game)
    sf::RenderWindow screen(sf::VideoMode(1000, 1000), "Pacman indeed Edition"); //set up screen
    sf::Event event; //set up event queue
    sf::Clock clock; //set up the clock (needed for game timing)
    const float FPS = 165.0f; //FPS
    screen.setFramerateLimit(FPS); //set FPS

    //load in images
    sf::Texture brick;
    brick.loadFromFile("brick.png");
    sf::Sprite wall;
    wall.setTexture(brick);

    sf::Texture pacman;
    pacman.loadFromFile("pac.png");
    sf::IntRect pac(0, 0, 50, 50);
    sf::Sprite playerImg(pacman, pac);
    int ticker = 0;
    int frameNum = 0;
    int rowNum = 0;


    int map[20][20] = {
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,
        1,0,1,1,1,1,0,1,0,0,0,0,1,0,1,1,1,1,0,1,
        1,0,1,0,0,0,0,1,0,0,0,1,1,0,0,0,0,1,0,1,
        1,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,
        1,0,1,0,0,1,0,1,0,1,1,0,1,0,1,0,0,1,0,1,
        1,0,1,1,0,0,0,1,0,1,1,0,1,0,0,0,1,1,0,1,
        1,0,1,1,1,0,1,0,0,1,1,0,1,1,0,1,1,1,0,1,
        1,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,1,
        1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,
        1,1,1,0,1,0,1,0,0,0,0,0,0,1,0,0,0,1,1,1,
        1,1,0,0,1,0,1,0,1,1,1,1,0,1,0,1,0,0,1,1,
        1,0,0,1,1,0,0,0,1,1,1,1,0,0,0,1,1,0,0,1,
        1,0,1,1,1,0,1,0,0,0,0,0,0,1,0,1,1,1,0,1,
        1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,
        1,0,1,1,1,0,1,0,1,0,0,1,0,1,0,1,1,1,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    };

    //player setup
    int radius = 22;
    int xpos = 10 * 50;
    int ypos = 18 * 50;
    int vx = 0;
    int vy = 0;
    bool keys[] = { false, false, false, false };

    sf::CircleShape dot(5);
    dot.setFillColor(sf::Color::White);

    //################### HOLD ONTO YOUR BUTTS, ITS THE GAME LOOP###############################################################
    while (screen.isOpen()) {//keep window open until user shuts it down

        while (screen.pollEvent(event)) { //look for events-----------------------

            //this checks if the user has clicked the little "x" button in the top right corner 
            if (event.type == sf::Event::EventType::Closed)
                screen.close();
            //KEYBOARD INPUT 
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left)) {
                keys[LEFT] = true;
            }
            else keys[LEFT] = false;

            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right)) {
                keys[RIGHT] = true;
            }
            else keys[RIGHT] = false;

            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up)) {
                keys[UP] = true;
            }
            else keys[UP] = false;

            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down)) {
                keys[DOWN] = true;
            }
            else keys[DOWN] = false;


        }//end event loop---------------------------------------------------------------

        //move Mr. Pac--------------------------------------------------
        // LEFT RIGHT

        if (keys[LEFT] == true)
            vx = -3;

        else if (keys[RIGHT] == true)
            vx = 3;

        else vx = 0;


        // UP DOWN

        if (keys[UP] == true)
            vy = -3;

        else if (keys[DOWN] == true)
            vy = 3;

        else vy = 0;




        //more working
//right
        if (vx > 0 && (map[(ypos + 3) / 50][(xpos + radius * 2 + 3) / 50] == 1 || map[(ypos + radius * 2 - 3) / 50][(xpos + radius * 2 + 3) / 50] == 1)) {
            vx = 0;

        }

        //left
        if (vx < 0 && (map[(ypos + 3) / 50][(xpos - 3) / 50] == 1 || map[(ypos + radius * 2 - 3) / 50][(xpos - 3) / 50] == 1)) {
            vx = 0;

        }

        //down, so positive
        if (vy > 0 && (map[(ypos + radius * 2 + 3) / 50][(xpos + 3) / 50] == 1 || map[(ypos + radius * 2 + 3) / 50][(xpos + radius * 2 - 3) / 50] == 1))
            vy = 0;

        //up, so negative
        if (vy < 0 && (map[(ypos - 3) / 50][(xpos + radius * 2 - 3) / 50] == 1 || map[(ypos - 3) / 50][(xpos + 3) / 50] == 1))
            vy = 0;

        xpos += vx;
        ypos += vy;
        playerImg.setPosition(xpos, ypos);

        if (vx != 0 || vy != 0) {
            ticker += 1;
            if (ticker % 10 == 0)
                frameNum += 1;
            if (frameNum > 3)
                frameNum = 0;
        }



        pac = sf::IntRect(frameNum * 50, rowNum * 50, 50, 50);
        sf::Sprite playerImg(pacman, pac);
        playerImg.setPosition(xpos, ypos);


        //eat dots
        if (map[(ypos + 25) / 50][(xpos + 25) / 50] == 0)
            map[(ypos + 25) / 50][(xpos + 25) / 50] = 100;



        //render section-----------------------------------------
        screen.clear(); //wipes screen, without this things smear
        for (int rows = 0; rows < 20; rows++)
            for (int cols = 0; cols < 20; cols++) {
                if (map[rows][cols] == 1) {
                    wall.setPosition(cols * 50, rows * 50);
                    screen.draw(wall);
                }
                if (map[rows][cols] == 0) {
                    dot.setPosition(cols * 50 + 20, rows * 50 + 20);
                    screen.draw(dot);
                }
            }
        screen.draw(playerImg);

        screen.display(); //flips memory drawings onto screen

    }//######################## end game loop ###################################################################################

    cout << "Guadalajara" << endl;
} //end of main
